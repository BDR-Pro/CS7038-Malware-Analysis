
tea1-32.o:     file format elf32-i386


Disassembly of section .text:

00000000 <encrypt>:
   0:	55                   	push   %ebp
   1:	89 e5                	mov    %esp,%ebp
   3:	83 ec 30             	sub    $0x30,%esp
   6:	e8 fc ff ff ff       	call   7 <encrypt+0x7>
   b:	05 01 00 00 00       	add    $0x1,%eax
  10:	8b 45 08             	mov    0x8(%ebp),%eax
  13:	8b 00                	mov    (%eax),%eax
  15:	89 45 dc             	mov    %eax,-0x24(%ebp)
  18:	8b 45 08             	mov    0x8(%ebp),%eax
  1b:	8b 40 04             	mov    0x4(%eax),%eax
  1e:	89 45 e0             	mov    %eax,-0x20(%ebp)
  21:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  28:	c7 45 ec b9 79 37 9e 	movl   $0x9e3779b9,-0x14(%ebp)
  2f:	8b 45 0c             	mov    0xc(%ebp),%eax
  32:	8b 00                	mov    (%eax),%eax
  34:	89 45 f0             	mov    %eax,-0x10(%ebp)
  37:	8b 45 0c             	mov    0xc(%ebp),%eax
  3a:	8b 40 04             	mov    0x4(%eax),%eax
  3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
  40:	8b 45 0c             	mov    0xc(%ebp),%eax
  43:	8b 40 08             	mov    0x8(%eax),%eax
  46:	89 45 f8             	mov    %eax,-0x8(%ebp)
  49:	8b 45 0c             	mov    0xc(%ebp),%eax
  4c:	8b 40 0c             	mov    0xc(%eax),%eax
  4f:	89 45 fc             	mov    %eax,-0x4(%ebp)
  52:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  59:	eb 62                	jmp    bd <encrypt+0xbd>
  5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
  5e:	01 45 e4             	add    %eax,-0x1c(%ebp)
  61:	8b 45 e0             	mov    -0x20(%ebp),%eax
  64:	c1 e0 04             	shl    $0x4,%eax
  67:	89 c2                	mov    %eax,%edx
  69:	8b 45 f0             	mov    -0x10(%ebp),%eax
  6c:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  6f:	8b 55 e0             	mov    -0x20(%ebp),%edx
  72:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  75:	01 d0                	add    %edx,%eax
  77:	31 c1                	xor    %eax,%ecx
  79:	89 ca                	mov    %ecx,%edx
  7b:	8b 45 e0             	mov    -0x20(%ebp),%eax
  7e:	c1 e8 05             	shr    $0x5,%eax
  81:	89 c1                	mov    %eax,%ecx
  83:	8b 45 f4             	mov    -0xc(%ebp),%eax
  86:	01 c8                	add    %ecx,%eax
  88:	31 d0                	xor    %edx,%eax
  8a:	01 45 dc             	add    %eax,-0x24(%ebp)
  8d:	8b 45 dc             	mov    -0x24(%ebp),%eax
  90:	c1 e0 04             	shl    $0x4,%eax
  93:	89 c2                	mov    %eax,%edx
  95:	8b 45 f8             	mov    -0x8(%ebp),%eax
  98:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  9b:	8b 55 dc             	mov    -0x24(%ebp),%edx
  9e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  a1:	01 d0                	add    %edx,%eax
  a3:	31 c1                	xor    %eax,%ecx
  a5:	89 ca                	mov    %ecx,%edx
  a7:	8b 45 dc             	mov    -0x24(%ebp),%eax
  aa:	c1 e8 05             	shr    $0x5,%eax
  ad:	89 c1                	mov    %eax,%ecx
  af:	8b 45 fc             	mov    -0x4(%ebp),%eax
  b2:	01 c8                	add    %ecx,%eax
  b4:	31 d0                	xor    %edx,%eax
  b6:	01 45 e0             	add    %eax,-0x20(%ebp)
  b9:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
  bd:	83 7d e8 1f          	cmpl   $0x1f,-0x18(%ebp)
  c1:	76 98                	jbe    5b <encrypt+0x5b>
  c3:	8b 45 08             	mov    0x8(%ebp),%eax
  c6:	8b 55 dc             	mov    -0x24(%ebp),%edx
  c9:	89 10                	mov    %edx,(%eax)
  cb:	8b 45 08             	mov    0x8(%ebp),%eax
  ce:	8d 50 04             	lea    0x4(%eax),%edx
  d1:	8b 45 e0             	mov    -0x20(%ebp),%eax
  d4:	89 02                	mov    %eax,(%edx)
  d6:	90                   	nop
  d7:	c9                   	leave  
  d8:	c3                   	ret    

000000d9 <decrypt>:
  d9:	55                   	push   %ebp
  da:	89 e5                	mov    %esp,%ebp
  dc:	83 ec 30             	sub    $0x30,%esp
  df:	e8 fc ff ff ff       	call   e0 <decrypt+0x7>
  e4:	05 01 00 00 00       	add    $0x1,%eax
  e9:	8b 45 08             	mov    0x8(%ebp),%eax
  ec:	8b 00                	mov    (%eax),%eax
  ee:	89 45 dc             	mov    %eax,-0x24(%ebp)
  f1:	8b 45 08             	mov    0x8(%ebp),%eax
  f4:	8b 40 04             	mov    0x4(%eax),%eax
  f7:	89 45 e0             	mov    %eax,-0x20(%ebp)
  fa:	c7 45 e4 20 37 ef c6 	movl   $0xc6ef3720,-0x1c(%ebp)
 101:	c7 45 ec b9 79 37 9e 	movl   $0x9e3779b9,-0x14(%ebp)
 108:	8b 45 0c             	mov    0xc(%ebp),%eax
 10b:	8b 00                	mov    (%eax),%eax
 10d:	89 45 f0             	mov    %eax,-0x10(%ebp)
 110:	8b 45 0c             	mov    0xc(%ebp),%eax
 113:	8b 40 04             	mov    0x4(%eax),%eax
 116:	89 45 f4             	mov    %eax,-0xc(%ebp)
 119:	8b 45 0c             	mov    0xc(%ebp),%eax
 11c:	8b 40 08             	mov    0x8(%eax),%eax
 11f:	89 45 f8             	mov    %eax,-0x8(%ebp)
 122:	8b 45 0c             	mov    0xc(%ebp),%eax
 125:	8b 40 0c             	mov    0xc(%eax),%eax
 128:	89 45 fc             	mov    %eax,-0x4(%ebp)
 12b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
 132:	eb 62                	jmp    196 <decrypt+0xbd>
 134:	8b 45 dc             	mov    -0x24(%ebp),%eax
 137:	c1 e0 04             	shl    $0x4,%eax
 13a:	89 c2                	mov    %eax,%edx
 13c:	8b 45 f8             	mov    -0x8(%ebp),%eax
 13f:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
 142:	8b 55 dc             	mov    -0x24(%ebp),%edx
 145:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 148:	01 d0                	add    %edx,%eax
 14a:	31 c1                	xor    %eax,%ecx
 14c:	89 ca                	mov    %ecx,%edx
 14e:	8b 45 dc             	mov    -0x24(%ebp),%eax
 151:	c1 e8 05             	shr    $0x5,%eax
 154:	89 c1                	mov    %eax,%ecx
 156:	8b 45 fc             	mov    -0x4(%ebp),%eax
 159:	01 c8                	add    %ecx,%eax
 15b:	31 d0                	xor    %edx,%eax
 15d:	29 45 e0             	sub    %eax,-0x20(%ebp)
 160:	8b 45 e0             	mov    -0x20(%ebp),%eax
 163:	c1 e0 04             	shl    $0x4,%eax
 166:	89 c2                	mov    %eax,%edx
 168:	8b 45 f0             	mov    -0x10(%ebp),%eax
 16b:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
 16e:	8b 55 e0             	mov    -0x20(%ebp),%edx
 171:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 174:	01 d0                	add    %edx,%eax
 176:	31 c1                	xor    %eax,%ecx
 178:	89 ca                	mov    %ecx,%edx
 17a:	8b 45 e0             	mov    -0x20(%ebp),%eax
 17d:	c1 e8 05             	shr    $0x5,%eax
 180:	89 c1                	mov    %eax,%ecx
 182:	8b 45 f4             	mov    -0xc(%ebp),%eax
 185:	01 c8                	add    %ecx,%eax
 187:	31 d0                	xor    %edx,%eax
 189:	29 45 dc             	sub    %eax,-0x24(%ebp)
 18c:	8b 45 ec             	mov    -0x14(%ebp),%eax
 18f:	29 45 e4             	sub    %eax,-0x1c(%ebp)
 192:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
 196:	83 7d e8 1f          	cmpl   $0x1f,-0x18(%ebp)
 19a:	76 98                	jbe    134 <decrypt+0x5b>
 19c:	8b 45 08             	mov    0x8(%ebp),%eax
 19f:	8b 55 dc             	mov    -0x24(%ebp),%edx
 1a2:	89 10                	mov    %edx,(%eax)
 1a4:	8b 45 08             	mov    0x8(%ebp),%eax
 1a7:	8d 50 04             	lea    0x4(%eax),%edx
 1aa:	8b 45 e0             	mov    -0x20(%ebp),%eax
 1ad:	89 02                	mov    %eax,(%edx)
 1af:	90                   	nop
 1b0:	c9                   	leave  
 1b1:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.ax:

00000000 <__x86.get_pc_thunk.ax>:
   0:	8b 04 24             	mov    (%esp),%eax
   3:	c3                   	ret    
